#Changing Working Directory and reading data set
setwd("G:\\Term_2\\Econometrics\\Assignment")
rain <- read.csv("Rainfall_1.csv")
View(rain)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start = c(2000,1),frequency = 12)
class(rain_fall)
start(rain_fall)
end(rain_fall)
frequency(rain_fall)
head(rain_fall)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start = c(2000,1),frequency = 12)
View(rain_fall)
end(rain_fall)
View(rain)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start = c(2000,1),frequency = 12)
class(rain_fall)
start(rain_fall)
end(rain_fall)
par(mfrow=c(1,1))
plot(rain_fall, xlab='Year', ylab = 'Rainfall')
rainfall<-read.csv("G:\\Term_2\\Econometrics\\Assignment\\Rainfall_1.csv")
#class(rainfall)
#rain<-ts(rainfall)
#class(rain)
rain_fall1<-ts(rainfall[,2],start = c(2000,1),frequency = 12)
class(rain_fall)
plot(rain_fall1,xlab='Years', ylab = 'Rain')
View(rain_fall1)
end(rain_fall1)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],frequency = 12)
class(rain_fall)
start(rain_fall)
end(rain_fall)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start=c(01,2000)frequency = 12)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start=c(01,2000),frequency = 12)
class(rain_fall)
start(rain_fall)
end(rain_fall)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start=c(2000,01),frequency = 12)
class(rain_fall)
start(rain_fall)
end(rain_fall)
rainfall<-read.csv("G:\\Term_2\\Econometrics\\Assignment\\Rainfall_1.csv")
View(rainfall)
#class(rainfall)
#rain<-ts(rainfall)
#class(rain)
rain_fall<-ts(rainfall[,2],start = c(2000,1),frequency = 12)
class(rain_fall)
plot(rain_fall,xlab='Years', ylab = 'Rain')
View(rain_fall)
#Changing Working Directory and reading data set
setwd("G:\\Term_2\\Econometrics\\Assignment")
rain <- read.csv("Rainfall_1.csv")
View(rain)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start=c(2000,1),frequency = 12)
class(rain_fall)
start(rain_fall)
end(rain_fall)
#Changing Working Directory and reading data set
setwd("G:\\Term_2\\Econometrics\\Assignment\\consolidated")
rain <- read.csv("Rainfall_Monthly.csv")
View(rain)
#Converting dataset into TimeSeries Data
rain_fall = ts(rain[,2],start=c(2000,1),frequency = 12)
class(rain_fall)
start(rain_fall)
end(rain_fall)
frequency(rain_fall)
head(rain_fall)
par(mfrow=c(1,1))
plot(rain_fall, xlab='Year', ylab = 'Rainfall')
cycle(rain_fall)
library(forecast)
seasonplot(rain_fall,
col = c("red","blue","green","skyblue","yellow",
"orange","pink","lightgreen","purple","magenta"),
bty ="l",
type = "l",
year.labels = T)
boxplot(rain_fall~cycle(rain_fall))
rain_decompose <- decompose(rain_fall,"additive")
plot(rain_decompose)
abline(reg = lm(rain_fall~time(rain_fall)))
rain_decompose_add <- decompose(rain_fall,"additive")
plot(rain_decompose_add)
abline(reg = lm(rain_fall~time(rain_fall)))
rain_decompose_mul <- decompose(rain_fall,"multiplicative")
plot(rain_decompose_mul)
abline(reg = lm(rain_fall~time(rain_fall)))
rain_log <- log(rain_fall)
plot.ts(rain_fall)
plot.ts(rain_log,xlab='Year', ylab = 'Log(Rainfall)')
head(rain_log)
rain_ema3 <-EMA(rain_fall,3)
rain_ema6 <-EMA(rain_fall,6)
rain_ema9 <-EMA(rain_fall,9)
rain_ema12 <-EMA(rain_fall,12)
library(TTR)
rain_ema3 <-EMA(rain_fall,3)
rain_ema6 <-EMA(rain_fall,6)
rain_ema9 <-EMA(rain_fall,9)
rain_ema12 <-EMA(rain_fall,12)
par(mfrow=c(2,1))
plot.ts(rain_ema3)
plot.ts(rain_ema6)
plot.ts(rain_ema9)
plot.ts(rain_ema12)
library(urca)
library(tseries)
rain_fall %>% ur.kpss() %>% summary()
adf.test(rain_fall, k=3)
par(mfrow = c(1,2))
acf(ts(rain_fall),main='ACF Rainfall')
pacf(ts(rain_fall),main='PACF Rainfall')
ARIMAfit_1 = auto.arima(rain_fall, approximation=FALSE,trace=FALSE)
summary(ARIMAfit_1)
par(mfrow = c(1,1))
pred = predict(ARIMAfit_1, n.ahead = 36)
pred
plot(rain_fall,type='l',xlim=c(2010,2018),ylim=c(1,250),xlab = 'Year',ylab = 'Rainfall')
lines(10^(pred$pred),col='blue')
lines(10^(pred$pred+2*pred$se),col='orange')
lines(10^(pred$pred-2*pred$se),col='orange')
Box.test(ARIMAfit_1$residuals, lag = 5, type = "Ljung-Box")
forecast_rain <- forecast(ARIMAfit_1, h = 36)
plot(forecast_rain)
par(mfrow=c(1,3))
plot.ts(ARIMAfit_1$residuals)
acf(ts(ARIMAfit_1$residuals),main='ACF Residual')
pacf(ts(ARIMAfit_1$residuals),main='PACF Residual')
par(mfrow=c(1,1))
checkresiduals(ARIMAfit)
checkresiduals(ARIMAfit_1)
cor(rain_fall[2:142],rain_fall[1:141])
plot(rain_fall[2:142],rain_fall[1:141])
fit1 <- ets(rainfall)
fit1 <- ets(rain_fall)
fit2 <- ets(rain_fall,model="ZNN",damped=FALSE)
fcast1 <- forecast(fit1, h=12)
fcast2 <- forecast(fit2, h=12)
accuracy(fcast1)
accuracy(fcast2)
plot(forecast(fit1)) ### without h = 12
plot(fcast1)
plot(fcast2)
View(forecast_rain)
rainTrain = window(rain_fall, start = c(2000, 1), end=c(2009, 12))
rainTest = window(rain_fall, start = c(2010, 1))
forecast_mean <- meanf(rainTrain, h = 12)
forecast_naive <- naive(rainTrain, h=12)
forecast_seasonalnaive <- snaive(rainTrain, h=12)
forecast_drift <- rwf(rainTrain,drift = TRUE, h=12)
accuracy(forecast_mean)
accuracy(forecast_naive)
accuracy(forecast_seasonalnaive)
accuracy(forecast_drift)
plot(forecast_seasonalnaive,  main="Forecast for monthly rains using Seasonal Naive", xlab="Time", ylab="Rainfall")
plot(forecast_drift,  main="Forecast for monthly rains using Drift", xlab="Time", ylab="Rainfall")
plot(forecast_naive,  main="Forecast for monthly rains using Naive", xlab="Time", ylab="Rainfall")
plot(forecast_mean,  main="Forecast for monthly rains using Mean", xlab="Time", ylab="Rainfall")
library(jpeg)
install.packages('jpeg')
install.packages('jpeg')
library(jpeg)
image=readJPEG("Downloads\\images.jpg")
image=readJPEG("Downloads\\images.jpg")
image=readJPEG("C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Downloads\\images.jpg")
library(jpeg)
image=readJPEG("C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Downloads\\images.jpg")
image=readJPEG("C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\images.jpg")
dim(image)
r <- image[,,1]
r <- image[,,1]
g <- image[,,1]
b <- image[,,1]
image.r.pca <- prcomp(r, center = FALSE)
image.g.pca <- prcomp(g, center = FALSE)
image.b.pca <- prcomp(b, center = FALSE)
round(cumsum(image.b.pca$sdev^2)/sum(image.b.pca$sdev^2)*100,2)
image=readJPEG("C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\katia.jpg")
dim(image)
#Extracting the R-G-B components separately
r <- image[,,1]
g <- image[,,1]
b <- image[,,1]
#PCA on each of the RGB components separately
image.r.pca <- prcomp(r, center = FALSE)
image.g.pca <- prcomp(g, center = FALSE)
image.b.pca <- prcomp(b, center = FALSE)
round(cumsum(image.b.pca$sdev^2)/sum(image.b.pca$sdev^2)*100,2)
#Putting the PC object in a list
rgb.pca <- list(image.r.pca,image.g.pca,image.b.pca)
#Deciding on the no. of components
ncomp=50
R=image.r.pca$x[,1:ncomp]%*%t(image.r.pca$rotation[,1:ncomp])
G=image.g.pca$x[,1:ncomp]%*%t(image.g.pca$rotation[,1:ncomp])
B=image.b.pca$x[,1:ncomp]%*%t(image.b.pca$rotation[,1:ncomp])
R=ifelse(R>1,1,R)
G=ifelse(G>1,1,G)
B=ifelse(B>1,1,B)
R=ifelse(R<0,0,R)
G=ifelse(G<0,0,G)
B=ifelse(B<0,0,B)
img=array(c(R,G,B),dim=dim(image))
summary(img)
writeJPEG(img,"C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\katia_compressed.jpg")
dim(image)
#============================================================
image1=readJPEG("C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\img1.png")
#============================================================
image1=readJPEG("C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\images1.jpg")
dim(image)
dim(image1)
r <- image1[,,1]
g <- image1[,,1]
b <- image1[,,1]
image1.r.pca <- prcomp(r, center = FALSE)
image1.g.pca <- prcomp(g, center = FALSE)
image1.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(image1.r.pca,image1.g.pca,image1.b.pca)
R=image1.r.pca$x[,1:ncomp]%*%t(image1.r.pca$rotation[,1:ncomp])
G=image1.g.pca$x[,1:ncomp]%*%t(image1.g.pca$rotation[,1:ncomp])
B=image1.b.pca$x[,1:ncomp]%*%t(image1.b.pca$rotation[,1:ncomp])
img=array(c(R,G,B),dim=dim(image1))
summary(img)
writeJPEG(img,"C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\compressed.jpg")
ncomp1=150
R=image1.r.pca$x[,1:ncomp1]%*%t(image1.r.pca$rotation[,1:ncomp])
G=image1.g.pca$x[,1:ncomp1]%*%t(image1.g.pca$rotation[,1:ncomp])
B=image1.b.pca$x[,1:ncomp1]%*%t(image1.b.pca$rotation[,1:ncomp])
R=image1.r.pca$x[,1:ncomp1]%*%t(image1.r.pca$rotation[,1:ncomp1])
G=image1.g.pca$x[,1:ncomp1]%*%t(image1.g.pca$rotation[,1:ncomp1])
B=image1.b.pca$x[,1:ncomp1]%*%t(image1.b.pca$rotation[,1:ncomp1])
img=array(c(R,G,B),dim=dim(image1))
summary(img)
writeJPEG(img,"C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\compressed.jpg")
R=ifelse(R>1,1,R)
G=ifelse(G>1,1,G)
B=ifelse(B>1,1,B)
R=ifelse(R<0,0,R)
G=ifelse(G<0,0,G)
B=ifelse(B<0,0,B)
img=array(c(R,G,B),dim=dim(image1))
summary(img)
writeJPEG(img,"C:\\Users\\Neha .LAPTOP-3A7IMB8U\\Desktop\\compressed.jpg")
library(HypothesisR)
attrition<-read.csv("G:\\Term_2\\R\\Attrition_csv.csv")
att1<-subset(attrition, select = -c(Attrition))
hypo<-hypothesis_test(att1,attrition$Attrition,c(2))
library(HypothesisR)
attrition<-read.csv("G:\\Term_2\\R\\Attrition_csv.csv")
att1<-subset(attrition, select = -c(Attrition))
hypo<-hypothesis_test(att1,attrition$Attrition,c(2))
